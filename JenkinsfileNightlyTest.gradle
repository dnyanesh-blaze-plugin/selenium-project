package webdriver.tests.suites
//script used in the jenkin's job 'Pipeline RUN ALL TESTS PIPELINE SCRIPT' that runs the overnight tests.

def CURRENT_STAGE = ""

//the groups of test suites will run parallel
//tests are grouped by similiar run times
//groups run sequentially, tests within groups run in parallel.
//testSuitesGroup1 will run all tests in the group in paralle, testSuitesGroup2 will not
//run until all tests in testSuitesGroup1 complete.
//tests do not repeat on failure.

//group 1 and 2 tests that take under 21 minutes
def testSuitesGroup1 = [
        'ValidatorTestSuite', //7 minutes
        'LoginTestSuite', //5
        'TravelPolicyTestSuite', //13
        'RoutingPoolMaintenanceSuite', //20
        'LocalTravelTestSuite', //15
        'LodgingAndMeals', //26
        'Payments', //11
        'SmokeTest', //20
        'EmailInformation', //26
        'SelfApprovalSuite', //28
        'ForeignCurrencyTestSuite', //30
]

// group 3 and 4 tests that take 21 minutes to an hour to complete
def testSuitesGroup2 = [
       // 'DotTestSuite', //34
      //  'EmailE2Processor', //37 disabled only ran during qa cycle, manually.
     //   'TransAndOtherExpenses', //35
        'TravelAgentAssistance', //35
      //  'WorkflowTest', //43
      //  'Reservations', //40
      //  'OtherActionsTestSuite', //40
      //  'CbaTestSuite', //1
      //  'MethodOfPayment', //1
      //  'DeploymentScenariosTestSuite', //1
      //  'OverlappingTripsTestSuite', //1
      //  'DashboardTestSuite', //1
]

def testSuitesGroup4 = [
       // 'LongTermTravelTestSuite', //1.5
       // 'NotificationTestSuite', //1.5
       // 'ChangeReservation', //2
       // 'InboundGDSxTestSuite', //2
       // 'ExtrasTestSuite', //2.5
       // 'CancelDeleteTestSuite', //2.52
       // 'DosTestSuite',  //3
       // 'ProfileTestSuite', //2
       // 'RoutingTestSuite', //2
       // 'RoutingTestSuite2', //2
       // 'LeaveTestSuite', //2
]

def testSuitesGroup5 = [
       // 'AccountingTestSuite', //3 hrs //split in half to speed up
       // 'AccountingTestSuite2', //3 hrs
       // 'AdministrationTestSuite', //4
      //  'ExpensesTestSuite', //4
      //  'ExpensesTestSuite2', //4
      //  'ReclaimTestSuite', //3 //split up to speed up, was 6 hours
      //  'ReclaimTestSuite2', //3
      //  'AmendmentsTestSuite', //3.5
      //  'SiteDetailsSuite', //3
      //  'VouchersSuite', //2 hours 44 minutes

]

pipeline {

    /*
    to run the pipeline job in replay mode do this:
    agent { label 'anxg236' }
    But IF you kick off fresh do this:
    agent { label 'ec2&&linux&&highmem' }
    ^^^ That will pick the 32G node.
     */
    agent { label 'ec2&&linux&&highmem' }

    tools {
        maven 'M3'
    }
    // master build logic
    stages {
        stage('Checkout') {
            steps {
                checkout(
                        [$class                           : 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]],
                         doGenerateSubmoduleConfigurations: false,
                         extensions                       : [[$class: 'PruneStaleBranch']],
                         submoduleCfg                     : [],
                         userRemoteConfigs                : [[credentialsId: 'f6fcad61-611a-4d57-a7a0-8e27706b1db8', url: 'https://github.com/cwt-dev/e2-selenium.git']]]
                )
            }
        }

        stage('mvn clean') {
            steps {
                script {
                    try {
                        sh('mvn clean')
                    } catch (err) {
                        echo "Caught: ${err}"
                        currentBuild.result = 'SUCCESS'
                    }
                }

            }
        }

        stage('group 1') {
            steps {
                script {
                    def tests = [:]
                    for (test in testSuitesGroup1) {
                        // Create temp variable, otherwise the name will be the last value of the for loop
                        def testName = test
                        tests["${testName}"] = {
                            stage("${testName}") {
                                CURRENT_STAGE = echo "${testName}"
                                try {
                                    sh('mvn install -P DOCKER_GRID_CHROME,QA3 -Dit.test=' + testName + ' verify')
                                } catch (err) {
                                    echo "Caught: ${err}"
                                    currentBuild.result = 'FAILURE'
                                }
                            }
                        }
                    }
                    parallel tests
                }
            }
            post {
                always {
                    //create diretory if it doesn't exist.
                    sh 'ls -l'
                    dir('target/failsafe-reports') {
                        writeFile file: 'dummy', text: ''
                    }
                    junit 'target/failsafe-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/screenshots/*.*', allowEmptyArchive: true
                }
                success {
                    sh 'echo "Completed successfully"'
                    slackSend channel: "#e2-selenium", color: "good", message: "Completed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
                failure {
                    sh 'echo "Failed to complete tests"'
                    slackSend channel: "#e2-selenium", color: "danger", message: "Failed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
            }//end post
        }
        stage('group 2') {
            steps {
                script {
                    def tests = [:]
                    for (test in testSuitesGroup2) {
                        // Create temp variable, otherwise the name will be the last value of the for loop
                        def testName = test
                        tests["${testName}"] = {
                            stage("${testName}") {
                                CURRENT_STAGE = echo "${testName}"
                                try {
                                    sh('mvn install -P DOCKER_GRID_CHROME,QA3 -Dit.test=' + testName + ' verify')
                                } catch (err) {
                                    echo "Caught: ${err}"
                                    currentBuild.result = 'FAILURE'
                                }
                            }
                        }
                    }
                    parallel tests
                }
            }
            post {
                always {
                    //create diretory if it doesn't exist.
                    sh 'ls -l'
                    dir('target/failsafe-reports') {
                        writeFile file: 'dummy', text: ''
                    }
                    junit 'target/failsafe-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/screenshots/*.*', allowEmptyArchive: true
                }
                success {
                    sh 'echo "Completed successfully"'
                    slackSend channel: "#e2-selenium", color: "good", message: "Completed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
                failure {
                    sh 'echo "Failed to complete tests"'
                    slackSend channel: "#e2-selenium", color: "danger", message: "Failed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
            }//end post
        }

        stage('group 3') {
            steps {
                script {
                    def tests = [:]
                    for (test in testSuitesGroup3) {
                        // Create temp variable, otherwise the name will be the last value of the for loop
                        def testName = test
                        tests["${testName}"] = {
                            stage("${testName}") {
                                CURRENT_STAGE = echo "${testName}"
                                try {
                                    sh('mvn install -P DOCKER_GRID_CHROME,QA3 -Dit.test=' + testName + ' verify')
                                } catch (err) {
                                    echo "Caught: ${err}"
                                    currentBuild.result = 'FAILURE'
                                }
                            }
                        }
                    }
                    parallel tests
                }
            }
            post {
                always {
                    //create diretory if it doesn't exist.
                    sh 'ls -l'
                    dir('target/failsafe-reports') {
                        writeFile file: 'dummy', text: ''
                    }
                    junit 'target/failsafe-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/screenshots/*.*', allowEmptyArchive: true
                }
                success {
                    sh 'echo "Completed successfully"'
                    slackSend channel: "#e2-selenium", color: "good", message: "Completed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
                failure {
                    sh 'echo "Failed to complete tests"'
                    slackSend channel: "#e2-selenium", color: "danger", message: "Failed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
            }//end post
        }

        stage('group 4') {
            steps {
                script {
                    def tests = [:]
                    for (test in testSuitesGroup4) {
                        // Create temp variable, otherwise the name will be the last value of the for loop
                        def testName = test
                        tests["${testName}"] = {
                            stage("${testName}") {
                                CURRENT_STAGE = echo "${testName}"
                                try {
                                    sh('mvn install -P DOCKER_GRID_CHROME,QA3 -Dit.test=' + testName + ' verify')
                                } catch (err) {
                                    echo "Caught: ${err}"
                                    currentBuild.result = 'FAILURE'
                                }
                            }
                        }
                    }
                    parallel tests
                }
            }
            post {
                always {
                    //create diretory if it doesn't exist.
                    sh 'ls -l'
                    dir('target/failsafe-reports') {
                        writeFile file: 'dummy', text: ''
                    }
                    junit 'target/failsafe-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/screenshots/*.*', allowEmptyArchive: true
                }
                success {
                    sh 'echo "Completed successfully"'
                    slackSend channel: "#e2-selenium", color: "good", message: "Completed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
                failure {
                    sh 'echo "Failed to complete tests"'
                    slackSend channel: "#e2-selenium", color: "danger", message: "Failed $CURRENT_STAGE stage for ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}>) for branch ${env.BRANCH_NAME}."
                }
            }//end post
        }

    }

}




